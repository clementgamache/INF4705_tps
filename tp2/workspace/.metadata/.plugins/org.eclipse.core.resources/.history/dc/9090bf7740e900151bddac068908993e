package TP2;

import java.io.*;
import java.util.*;

public class Ville {
	
	private List<Emplacement> emplacements;
	private int capaciteFournisseur;
	
	public Ville(String fileName) throws IOException
	{
		readFile(fileName);
	}
	
	private void readFile(String fileName) throws IOException
	{
		FileReader fileReader = new FileReader(fileName);
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		String line = bufferedReader.readLine();
		line.trim();
		int nombreEmplacement = Integer.valueOf(line);
		emplacements = new LinkedList<Emplacement>();
		for (int i = 0; i < nombreEmplacement; ++i)
		{
			line = bufferedReader.readLine();
			if (line == null)
			{
				bufferedReader.close();
				throw new IOException();
			}
			line.trim();
			String[] lineValues = line.split("\\s+");
			int id     = Integer.valueOf(lineValues[1]);
			int revenu = Integer.valueOf(lineValues[2]);
			int poulet = Integer.valueOf(lineValues[3]);
			emplacements.add(new Emplacement(id, revenu, poulet));
		}
		line = bufferedReader.readLine();
		line.trim();
		capaciteFournisseur = Integer.valueOf(line);
		bufferedReader.close();
	}
	
	public void print()
	{
		System.out.println("Ville :");
		System.out.println("nombre d'emplacement : " + String.valueOf(emplacements.size()));
		for (Emplacement emplacement : emplacements)
		{
			System.out.format("id=%4d, revenu=%4d, poulet=%4d\n", emplacement.getId(), emplacement.getRevenu(), emplacement.getPoulet());
		}
		System.out.println("capacité fournisseur : " + String.valueOf(capaciteFournisseur));
	}
	
	public void vorace(boolean print)
	{
		List<Emplacement> meilleursEmplacements = null;
		//compute 10 times
		for (int i = 0; i < 10 ; ++i)
		{
			List<Emplacement> emplacementsRestants = new LinkedList<Emplacement>();
			List<Emplacement> emplacementsUtilises = new LinkedList<Emplacement>();
			emplacementsRestants.addAll(emplacements);
			int pouletUtilise = 0;
			float sommeRentabilite = 0;
			for (Emplacement emplacement : emplacementsRestants)
			{
				sommeRentabilite += emplacement.getRentabilite();
			}
			while (pouletUtilise < capaciteFournisseur && emplacementsRestants.size() > 0)
			{
				//la probabilite d'un emplacement sera sa rentabilite divisee par sommerentabilite
				
				Random randomGenerator = new Random();
				float randomNumber = randomGenerator.nextFloat() * sommeRentabilite;
				float rentabiliteCumulee = 0;
				//emplacementUtilise est l<emplacement calcule
				Emplacement emplacementUtilise= null;
				for (Emplacement emplacement : emplacementsRestants)
				{
					rentabiliteCumulee += emplacement.getRentabilite();
					if (randomNumber <= rentabiliteCumulee)
					{
						emplacementUtilise = emplacement;
						break;
					}
				}

				//Ajout de l<emplacement s'il est valide
				if (pouletUtilise + emplacementUtilise.getPoulet() <= capaciteFournisseur) {
					pouletUtilise += emplacementUtilise.getPoulet();
					emplacementsUtilises.add(emplacementUtilise);
				}
				sommeRentabilite -= emplacementUtilise.getRentabilite();
				emplacementsRestants.remove(emplacementUtilise);
			}
			if (meilleursEmplacements == null) {
				meilleursEmplacements = emplacementsUtilises;
			}
			else if (Emplacement.getRentabiliteTotale(emplacementsUtilises) > Emplacement.getRentabiliteTotale(meilleursEmplacements)) {
				meilleursEmplacements = emplacementsUtilises;
			}
		}
		if (print) {
			Emplacement.printEmplacementsChoisis(meilleursEmplacements);			
		}
		
	}
	
	public void dynamique(boolean print)
	{
		
	}
	
	public void local(boolean print)
	{
		
	}
	
}
